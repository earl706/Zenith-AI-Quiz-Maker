516d4239ecf9bf44f06ef591e599f659
"use strict";

require("@testing-library/jest-dom");
// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    // deprecated
    removeListener: jest.fn(),
    // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  observe() {
    return null;
  }
  disconnect() {
    return null;
  }
  unobserve() {
    return null;
  }
};

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor() {}
  observe() {
    return null;
  }
  disconnect() {
    return null;
  }
  unobserve() {
    return null;
  }
};

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock;

// Mock sessionStorage
const sessionStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;

// Mock console methods to reduce noise in tests
global.console = {
  ...console
  // Uncomment to ignore a specific log level
  // log: jest.fn(),
  // debug: jest.fn(),
  // info: jest.fn(),
  // warn: jest.fn(),
  // error: jest.fn(),
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwiamVzdCIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJnbG9iYWwiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImNvbnN0cnVjdG9yIiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJ1bm9ic2VydmUiLCJSZXNpemVPYnNlcnZlciIsImxvY2FsU3RvcmFnZU1vY2siLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlTW9jayIsInNlc3Npb25TdG9yYWdlIiwiY29uc29sZSJdLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbi8vIE1vY2sgd2luZG93Lm1hdGNoTWVkaWFcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdtYXRjaE1lZGlhJywge1xuXHR3cml0YWJsZTogdHJ1ZSxcblx0dmFsdWU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHF1ZXJ5KSA9PiAoe1xuXHRcdG1hdGNoZXM6IGZhbHNlLFxuXHRcdG1lZGlhOiBxdWVyeSxcblx0XHRvbmNoYW5nZTogbnVsbCxcblx0XHRhZGRMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXG5cdFx0cmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuXHRcdGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcblx0XHRyZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG5cdFx0ZGlzcGF0Y2hFdmVudDogamVzdC5mbigpXG5cdH0pKVxufSk7XG5cbi8vIE1vY2sgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbmdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyIHtcblx0Y29uc3RydWN0b3IoKSB7fVxuXHRvYnNlcnZlKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGRpc2Nvbm5lY3QoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0dW5vYnNlcnZlKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG59O1xuXG4vLyBNb2NrIFJlc2l6ZU9ic2VydmVyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSBjbGFzcyBSZXNpemVPYnNlcnZlciB7XG5cdGNvbnN0cnVjdG9yKCkge31cblx0b2JzZXJ2ZSgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRkaXNjb25uZWN0KCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHVub2JzZXJ2ZSgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufTtcblxuLy8gTW9jayBsb2NhbFN0b3JhZ2VcbmNvbnN0IGxvY2FsU3RvcmFnZU1vY2sgPSB7XG5cdGdldEl0ZW06IGplc3QuZm4oKSxcblx0c2V0SXRlbTogamVzdC5mbigpLFxuXHRyZW1vdmVJdGVtOiBqZXN0LmZuKCksXG5cdGNsZWFyOiBqZXN0LmZuKClcbn07XG5nbG9iYWwubG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlTW9jaztcblxuLy8gTW9jayBzZXNzaW9uU3RvcmFnZVxuY29uc3Qgc2Vzc2lvblN0b3JhZ2VNb2NrID0ge1xuXHRnZXRJdGVtOiBqZXN0LmZuKCksXG5cdHNldEl0ZW06IGplc3QuZm4oKSxcblx0cmVtb3ZlSXRlbTogamVzdC5mbigpLFxuXHRjbGVhcjogamVzdC5mbigpXG59O1xuZ2xvYmFsLnNlc3Npb25TdG9yYWdlID0gc2Vzc2lvblN0b3JhZ2VNb2NrO1xuXG4vLyBNb2NrIGNvbnNvbGUgbWV0aG9kcyB0byByZWR1Y2Ugbm9pc2UgaW4gdGVzdHNcbmdsb2JhbC5jb25zb2xlID0ge1xuXHQuLi5jb25zb2xlXG5cdC8vIFVuY29tbWVudCB0byBpZ25vcmUgYSBzcGVjaWZpYyBsb2cgbGV2ZWxcblx0Ly8gbG9nOiBqZXN0LmZuKCksXG5cdC8vIGRlYnVnOiBqZXN0LmZuKCksXG5cdC8vIGluZm86IGplc3QuZm4oKSxcblx0Ly8gd2FybjogamVzdC5mbigpLFxuXHQvLyBlcnJvcjogamVzdC5mbigpLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBQTtBQUVBO0FBQ0FDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxNQUFNLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxLQUFLLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUVDLEtBQUssS0FBTTtJQUMvQ0MsT0FBTyxFQUFFLEtBQUs7SUFDZEMsS0FBSyxFQUFFRixLQUFLO0lBQ1pHLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLFdBQVcsRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUFFO0lBQ3hCTyxjQUFjLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFBRTtJQUMzQlEsZ0JBQWdCLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDM0JTLG1CQUFtQixFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCVSxhQUFhLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3hCLENBQUMsQ0FBQztBQUNILENBQUMsQ0FBQzs7QUFFRjtBQUNBVyxNQUFNLENBQUNDLG9CQUFvQixHQUFHLE1BQU1BLG9CQUFvQixDQUFDO0VBQ3hEQyxXQUFXQSxDQUFBLEVBQUcsQ0FBQztFQUNmQyxPQUFPQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUk7RUFDWjtFQUNBQyxVQUFVQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUk7RUFDWjtFQUNBQyxTQUFTQSxDQUFBLEVBQUc7SUFDWCxPQUFPLElBQUk7RUFDWjtBQUNELENBQUM7O0FBRUQ7QUFDQUwsTUFBTSxDQUFDTSxjQUFjLEdBQUcsTUFBTUEsY0FBYyxDQUFDO0VBQzVDSixXQUFXQSxDQUFBLEVBQUcsQ0FBQztFQUNmQyxPQUFPQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUk7RUFDWjtFQUNBQyxVQUFVQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUk7RUFDWjtFQUNBQyxTQUFTQSxDQUFBLEVBQUc7SUFDWCxPQUFPLElBQUk7RUFDWjtBQUNELENBQUM7O0FBRUQ7QUFDQSxNQUFNRSxnQkFBZ0IsR0FBRztFQUN4QkMsT0FBTyxFQUFFcEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQm9CLE9BQU8sRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDbEJxQixVQUFVLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ3JCc0IsS0FBSyxFQUFFdkIsSUFBSSxDQUFDQyxFQUFFLENBQUM7QUFDaEIsQ0FBQztBQUNEVyxNQUFNLENBQUNZLFlBQVksR0FBR0wsZ0JBQWdCOztBQUV0QztBQUNBLE1BQU1NLGtCQUFrQixHQUFHO0VBQzFCTCxPQUFPLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2xCb0IsT0FBTyxFQUFFckIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQnFCLFVBQVUsRUFBRXRCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDckJzQixLQUFLLEVBQUV2QixJQUFJLENBQUNDLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBQ0RXLE1BQU0sQ0FBQ2MsY0FBYyxHQUFHRCxrQkFBa0I7O0FBRTFDO0FBQ0FiLE1BQU0sQ0FBQ2UsT0FBTyxHQUFHO0VBQ2hCLEdBQUdBO0VBQ0g7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0QsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==