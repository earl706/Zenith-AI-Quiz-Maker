af94b8f17dd2f36ad5ce1e3a74790016
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QuestionCard;
var _react = _interopRequireWildcard(require("react"));
var _IdentificationAnswerInput = _interopRequireDefault(require("./IdentificationAnswerInput"));
var _MathRenderer = _interopRequireDefault(require("./MathRenderer"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function QuestionCard({
  question,
  answers,
  handleAnswerChange,
  handleIdentificationAnswerChange
}) {
  const answer = answers.find(a => a.id === question.id);
  (0, _react.useEffect)(() => {}, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: question.question_type === 'IDE' || question.question_type === 'IDE-COM' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_IdentificationAnswerInput.default, {
      answer: answer,
      question: question,
      handleIdentificationAnswerChange: handleIdentificationAnswerChange
    }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "mb-[20px] flex w-full flex-col items-center rounded-[20px] bg-[#EFF7FF] p-[30px] drop-shadow-lg",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
        className: "mb-2 text-lg font-semibold",
        children: question.question
      }), question.question_image && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "mb-[15px] flex justify-center",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
          src: question.question_image,
          alt: "Question",
          className: "max-h-[200px] rounded-[10px] object-cover"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "flex w-full flex-col gap-[10px]",
        children: question.choices.map((choice, index) => {
          // Handle new choice structure with id, text, and image
          const choiceText = choice.text || choice;
          const choiceImage = choice.image;
          const choiceId = choice.id || index;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: () => {
              handleAnswerChange(question.id, 'userAnswer', choiceText);
            },
            className: `w-full cursor-pointer rounded-[15px] p-[15px] text-center font-extrabold text-[#646464] transition ${answer.userAnswer === choiceText ? 'bg-[#007AFF] text-white' : 'bg-white hover:bg-[#007AFF] hover:text-white'}`,
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: "flex flex-col items-center gap-[10px]",
              children: [choiceImage && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "flex justify-center",
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                  src: choiceImage,
                  alt: `Choice ${index + 1}`,
                  className: "max-h-[120px] rounded-[8px] object-cover"
                })
              }), question.question_type === 'COM' || question.question_type === 'IDE-COM' || question.question_type === 'MUL-COM' ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "flex items-center justify-center",
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MathRenderer.default, {
                  expression: choiceText,
                  displayMode: false
                })
              }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                className: "text-center text-[14px] font-extrabold",
                children: choiceText
              })]
            })
          }, choiceId);
        })
      })]
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,