9c4005c453eed9711ec408a9e301304d
/**
 * react-router-dom v7.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);

// index.ts
var react_router_dom_exports = {};
__export(react_router_dom_exports, {
  HydratedRouter: () => import_dom.HydratedRouter,
  RouterProvider: () => import_dom.RouterProvider
});
module.exports = __toCommonJS(react_router_dom_exports);
var import_dom = require("react-router/dom");
__reExport(react_router_dom_exports, require("react-router"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HydratedRouter,
  RouterProvider,
  ...require("react-router")
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX19yZUV4cG9ydCIsIm1vZCIsInNlY29uZFRhcmdldCIsIl9fdG9Db21tb25KUyIsInZhbHVlIiwicmVhY3Rfcm91dGVyX2RvbV9leHBvcnRzIiwiSHlkcmF0ZWRSb3V0ZXIiLCJpbXBvcnRfZG9tIiwiUm91dGVyUHJvdmlkZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcmVhY3Qtcm91dGVyLWRvbSB2Ny4zLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3JlRXhwb3J0ID0gKHRhcmdldCwgbW9kLCBzZWNvbmRUYXJnZXQpID0+IChfX2NvcHlQcm9wcyh0YXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpLCBzZWNvbmRUYXJnZXQgJiYgX19jb3B5UHJvcHMoc2Vjb25kVGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gaW5kZXgudHNcbnZhciByZWFjdF9yb3V0ZXJfZG9tX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHJlYWN0X3JvdXRlcl9kb21fZXhwb3J0cywge1xuICBIeWRyYXRlZFJvdXRlcjogKCkgPT4gaW1wb3J0X2RvbS5IeWRyYXRlZFJvdXRlcixcbiAgUm91dGVyUHJvdmlkZXI6ICgpID0+IGltcG9ydF9kb20uUm91dGVyUHJvdmlkZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocmVhY3Rfcm91dGVyX2RvbV9leHBvcnRzKTtcbnZhciBpbXBvcnRfZG9tID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci9kb21cIik7XG5fX3JlRXhwb3J0KHJlYWN0X3JvdXRlcl9kb21fZXhwb3J0cywgcmVxdWlyZShcInJlYWN0LXJvdXRlclwiKSwgbW9kdWxlLmV4cG9ydHMpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEh5ZHJhdGVkUm91dGVyLFxuICBSb3V0ZXJQcm92aWRlcixcbiAgLi4ucmVxdWlyZShcInJlYWN0LXJvdXRlclwiKVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFDWixJQUFJQSxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsY0FBYztBQUNyQyxJQUFJQyxnQkFBZ0IsR0FBR0YsTUFBTSxDQUFDRyx3QkFBd0I7QUFDdEQsSUFBSUMsaUJBQWlCLEdBQUdKLE1BQU0sQ0FBQ0ssbUJBQW1CO0FBQ2xELElBQUlDLFlBQVksR0FBR04sTUFBTSxDQUFDTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsUUFBUSxHQUFHQSxDQUFDQyxNQUFNLEVBQUVDLEdBQUcsS0FBSztFQUM5QixLQUFLLElBQUlDLElBQUksSUFBSUQsR0FBRyxFQUNsQlosU0FBUyxDQUFDVyxNQUFNLEVBQUVFLElBQUksRUFBRTtJQUFFQyxHQUFHLEVBQUVGLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDO0lBQUVFLFVBQVUsRUFBRTtFQUFLLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBQ0QsSUFBSUMsV0FBVyxHQUFHQSxDQUFDQyxFQUFFLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEtBQUs7RUFDNUMsSUFBSUYsSUFBSSxJQUFJLE9BQU9BLElBQUksS0FBSyxRQUFRLElBQUksT0FBT0EsSUFBSSxLQUFLLFVBQVUsRUFBRTtJQUNsRSxLQUFLLElBQUlHLEdBQUcsSUFBSWhCLGlCQUFpQixDQUFDYSxJQUFJLENBQUMsRUFDckMsSUFBSSxDQUFDWCxZQUFZLENBQUNlLElBQUksQ0FBQ0wsRUFBRSxFQUFFSSxHQUFHLENBQUMsSUFBSUEsR0FBRyxLQUFLRixNQUFNLEVBQy9DbkIsU0FBUyxDQUFDaUIsRUFBRSxFQUFFSSxHQUFHLEVBQUU7TUFBRVAsR0FBRyxFQUFFQSxDQUFBLEtBQU1JLElBQUksQ0FBQ0csR0FBRyxDQUFDO01BQUVOLFVBQVUsRUFBRSxFQUFFSyxJQUFJLEdBQUdqQixnQkFBZ0IsQ0FBQ2UsSUFBSSxFQUFFRyxHQUFHLENBQUMsQ0FBQyxJQUFJRCxJQUFJLENBQUNMO0lBQVcsQ0FBQyxDQUFDO0VBQ3hIO0VBQ0EsT0FBT0UsRUFBRTtBQUNYLENBQUM7QUFDRCxJQUFJTSxVQUFVLEdBQUdBLENBQUNaLE1BQU0sRUFBRWEsR0FBRyxFQUFFQyxZQUFZLE1BQU1ULFdBQVcsQ0FBQ0wsTUFBTSxFQUFFYSxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUVDLFlBQVksSUFBSVQsV0FBVyxDQUFDUyxZQUFZLEVBQUVELEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoSixJQUFJRSxZQUFZLEdBQUlGLEdBQUcsSUFBS1IsV0FBVyxDQUFDaEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRTtFQUFFMkIsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDLEVBQUVILEdBQUcsQ0FBQzs7QUFFMUY7QUFDQSxJQUFJSSx3QkFBd0IsR0FBRyxDQUFDLENBQUM7QUFDakNsQixRQUFRLENBQUNrQix3QkFBd0IsRUFBRTtFQUNqQ0MsY0FBYyxFQUFFQSxDQUFBLEtBQU1DLFVBQVUsQ0FBQ0QsY0FBYztFQUMvQ0UsY0FBYyxFQUFFQSxDQUFBLEtBQU1ELFVBQVUsQ0FBQ0M7QUFDbkMsQ0FBQyxDQUFDO0FBQ0ZDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHUCxZQUFZLENBQUNFLHdCQUF3QixDQUFDO0FBQ3ZELElBQUlFLFVBQVUsR0FBR0ksT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzVDWCxVQUFVLENBQUNLLHdCQUF3QixFQUFFTSxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUVGLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDO0FBQzdFO0FBQ0EsQ0FBQyxLQUFLRCxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNyQkosY0FBYztFQUNkRSxjQUFjO0VBQ2QsR0FBR0csT0FBTyxDQUFDLGNBQWM7QUFDM0IsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119