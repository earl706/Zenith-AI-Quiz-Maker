cd4665a32ea8d4fade2b79789e092c9f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QuizFlashcardAttemptPage;
var _react = _interopRequireWildcard(require("react"));
var _IdentificationAnswerInput = _interopRequireDefault(require("../components/IdentificationAnswerInput"));
var _MathRenderer = _interopRequireDefault(require("../components/MathRenderer"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function QuizFlashcardAttemptPage({
  questionsParam,
  submitAnswers,
  handleAnswerChange,
  handleIdentificationAnswerChange,
  answers
}) {
  const [questions, setQuestions] = (0, _react.useState)([]);
  const [questionNumber, setQuestionNumber] = (0, _react.useState)(0);
  const [currentQuestion, setCurrentQuestion] = (0, _react.useState)(null);

  // Helper function to get choice text and image
  const getChoiceData = choice => {
    if (typeof choice === 'object' && choice !== null) {
      return {
        text: choice.text || choice,
        image: choice.image,
        id: choice.id
      };
    }
    return {
      text: choice,
      image: null,
      id: null
    };
  };
  const handleNext = () => {
    setQuestionNumber(prev => (prev + 1) % questionsParam.length);
  };
  const handlePrev = () => {
    setQuestionNumber(prev => (prev - 1 + questionsParam.length) % questionsParam.length);
  };
  const answer = answers.find(a => a.id === currentQuestion?.id);
  (0, _react.useEffect)(() => {
    setQuestions(questionsParam);
  }, [questionsParam]);
  (0, _react.useEffect)(() => {
    if (questionsParam.length > 0) {
      setCurrentQuestion(questionsParam[questionNumber]);
    }
  }, [questionNumber, questionsParam]);
  if (!currentQuestion) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: "Loading..."
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex w-full flex-col rounded-[10px] bg-white px-6 py-4",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "mb-[20px] flex flex-col justify-center gap-[10px]",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: "flex w-full gap-[20px]",
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: handlePrev,
            className: "w-1/2 cursor-pointer rounded-full bg-[#3C6B9F] p-[10px] text-[16px] font-extrabold text-white transition-all hover:bg-[#1A497D]",
            children: "Prev"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: handleNext,
            className: "w-1/2 cursor-pointer rounded-full bg-[#3C6B9F] p-[10px] text-[16px] font-extrabold text-white transition-all hover:bg-[#1A497D]",
            children: "Next"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: submitAnswers,
          className: "w-full cursor-pointer rounded-full bg-[#00CA4E] p-[10px] text-[16px] font-extrabold text-white transition-all hover:bg-[#00AA2E]",
          children: "Submit"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "mb-[20px] text-center",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
          className: "text-sm text-gray-600",
          children: ["Question ", questionNumber + 1, " of ", questionsParam.length]
        })
      }), currentQuestion.question_type === 'IDE' || currentQuestion.question_type === 'IDE-COM' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_IdentificationAnswerInput.default, {
        answer: answer,
        question: currentQuestion,
        handleIdentificationAnswerChange: handleIdentificationAnswerChange
      }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: "mb-[20px] flex w-full flex-col items-center rounded-[20px] bg-[#EFF7FF] p-[30px] drop-shadow-lg",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          className: "mb-[10px] w-full text-center text-[16px] font-extrabold",
          children: currentQuestion.question
        }), currentQuestion.question_image && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "mb-[15px] flex justify-center",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
            src: currentQuestion.question_image,
            alt: "Question",
            className: "max-h-[200px] rounded-[10px] object-cover"
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "flex w-full flex-col gap-[10px]",
          children: currentQuestion.choices.map((choice, index) => {
            const choiceData = getChoiceData(choice);
            const isMathematical = currentQuestion.question_type === 'MUL-COM' || currentQuestion.question_type === 'COM' || currentQuestion.question_type === 'IDE-COM';
            return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
              onClick: () => {
                handleAnswerChange(currentQuestion.id, 'userAnswer', choiceData.text);
              },
              className: `w-full cursor-pointer rounded-full px-[30px] py-[10px] text-center font-extrabold text-[#646464] transition ${answer?.userAnswer === choiceData.text ? 'bg-[#007AFF] text-white' : 'bg-white hover:bg-[#007AFF] hover:text-white'}`,
              children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
                className: "flex flex-col items-center gap-[10px]",
                children: [choiceData.image && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "flex justify-center",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
                    src: choiceData.image,
                    alt: `Choice ${index + 1}`,
                    className: "max-h-[120px] rounded-[8px] object-cover"
                  })
                }), isMathematical ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "flex items-center justify-center",
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MathRenderer.default, {
                    expression: choiceData.text,
                    displayMode: false
                  })
                }) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
                  className: "text-center text-[14px] font-extrabold",
                  children: choiceData.text
                })]
              })
            }, index);
          })
        })]
      })]
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,