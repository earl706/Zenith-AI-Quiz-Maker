bf29bc5d69e6a650cbc6a0469bfc4cdc
"use strict";

require("@testing-library/jest-dom");
var _util = require("util");
// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    // deprecated
    removeListener: jest.fn(),
    // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  observe() {
    return null;
  }
  disconnect() {
    return null;
  }
  unobserve() {
    return null;
  }
};

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor() {}
  observe() {
    return null;
  }
  disconnect() {
    return null;
  }
  unobserve() {
    return null;
  }
};

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock;

// Mock sessionStorage
const sessionStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;

// Mock console methods to reduce noise in tests
global.console = {
  ...console
  // Uncomment to ignore a specific log level
  // log: jest.fn(),
  // debug: jest.fn(),
  // info: jest.fn(),
  // warn: jest.fn(),
  // error: jest.fn(),
};

// Mock TextEncoder and TextDecoder for Node.js environment
global.TextEncoder = _util.TextEncoder;
global.TextDecoder = _util.TextDecoder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX3V0aWwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsIndyaXRhYmxlIiwidmFsdWUiLCJqZXN0IiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJxdWVyeSIsIm1hdGNoZXMiLCJtZWRpYSIsIm9uY2hhbmdlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsImdsb2JhbCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInVub2JzZXJ2ZSIsIlJlc2l6ZU9ic2VydmVyIiwibG9jYWxTdG9yYWdlTW9jayIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwibG9jYWxTdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2VNb2NrIiwic2Vzc2lvblN0b3JhZ2UiLCJjb25zb2xlIiwiVGV4dEVuY29kZXIiLCJUZXh0RGVjb2RlciJdLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5pbXBvcnQgeyBUZXh0RW5jb2RlciwgVGV4dERlY29kZXIgfSBmcm9tICd1dGlsJztcblxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG5cdHdyaXRhYmxlOiB0cnVlLFxuXHR2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigocXVlcnkpID0+ICh7XG5cdFx0bWF0Y2hlczogZmFsc2UsXG5cdFx0bWVkaWE6IHF1ZXJ5LFxuXHRcdG9uY2hhbmdlOiBudWxsLFxuXHRcdGFkZExpc3RlbmVyOiBqZXN0LmZuKCksIC8vIGRlcHJlY2F0ZWRcblx0XHRyZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXG5cdFx0YWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuXHRcdHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcblx0XHRkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKClcblx0fSkpXG59KTtcblxuLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxuZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyID0gY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHt9XG5cdG9ic2VydmUoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0ZGlzY29ubmVjdCgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR1bm9ic2VydmUoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn07XG5cbi8vIE1vY2sgUmVzaXplT2JzZXJ2ZXJcbmdsb2JhbC5SZXNpemVPYnNlcnZlciA9IGNsYXNzIFJlc2l6ZU9ic2VydmVyIHtcblx0Y29uc3RydWN0b3IoKSB7fVxuXHRvYnNlcnZlKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGRpc2Nvbm5lY3QoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0dW5vYnNlcnZlKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG59O1xuXG4vLyBNb2NrIGxvY2FsU3RvcmFnZVxuY29uc3QgbG9jYWxTdG9yYWdlTW9jayA9IHtcblx0Z2V0SXRlbTogamVzdC5mbigpLFxuXHRzZXRJdGVtOiBqZXN0LmZuKCksXG5cdHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcblx0Y2xlYXI6IGplc3QuZm4oKVxufTtcbmdsb2JhbC5sb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2VNb2NrO1xuXG4vLyBNb2NrIHNlc3Npb25TdG9yYWdlXG5jb25zdCBzZXNzaW9uU3RvcmFnZU1vY2sgPSB7XG5cdGdldEl0ZW06IGplc3QuZm4oKSxcblx0c2V0SXRlbTogamVzdC5mbigpLFxuXHRyZW1vdmVJdGVtOiBqZXN0LmZuKCksXG5cdGNsZWFyOiBqZXN0LmZuKClcbn07XG5nbG9iYWwuc2Vzc2lvblN0b3JhZ2UgPSBzZXNzaW9uU3RvcmFnZU1vY2s7XG5cbi8vIE1vY2sgY29uc29sZSBtZXRob2RzIHRvIHJlZHVjZSBub2lzZSBpbiB0ZXN0c1xuZ2xvYmFsLmNvbnNvbGUgPSB7XG5cdC4uLmNvbnNvbGVcblx0Ly8gVW5jb21tZW50IHRvIGlnbm9yZSBhIHNwZWNpZmljIGxvZyBsZXZlbFxuXHQvLyBsb2c6IGplc3QuZm4oKSxcblx0Ly8gZGVidWc6IGplc3QuZm4oKSxcblx0Ly8gaW5mbzogamVzdC5mbigpLFxuXHQvLyB3YXJuOiBqZXN0LmZuKCksXG5cdC8vIGVycm9yOiBqZXN0LmZuKCksXG59O1xuXG4vLyBNb2NrIFRleHRFbmNvZGVyIGFuZCBUZXh0RGVjb2RlciBmb3IgTm9kZS5qcyBlbnZpcm9ubWVudFxuZ2xvYmFsLlRleHRFbmNvZGVyID0gVGV4dEVuY29kZXI7XG5nbG9iYWwuVGV4dERlY29kZXIgPSBUZXh0RGVjb2RlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUQsT0FBQTtBQUVBO0FBQ0FFLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxNQUFNLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxLQUFLLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUVDLEtBQUssS0FBTTtJQUMvQ0MsT0FBTyxFQUFFLEtBQUs7SUFDZEMsS0FBSyxFQUFFRixLQUFLO0lBQ1pHLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLFdBQVcsRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUFFO0lBQ3hCTyxjQUFjLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFBRTtJQUMzQlEsZ0JBQWdCLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDM0JTLG1CQUFtQixFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCVSxhQUFhLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3hCLENBQUMsQ0FBQztBQUNILENBQUMsQ0FBQzs7QUFFRjtBQUNBVyxNQUFNLENBQUNDLG9CQUFvQixHQUFHLE1BQU1BLG9CQUFvQixDQUFDO0VBQ3hEQyxXQUFXQSxDQUFBLEVBQUcsQ0FBQztFQUNmQyxPQUFPQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUk7RUFDWjtFQUNBQyxVQUFVQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUk7RUFDWjtFQUNBQyxTQUFTQSxDQUFBLEVBQUc7SUFDWCxPQUFPLElBQUk7RUFDWjtBQUNELENBQUM7O0FBRUQ7QUFDQUwsTUFBTSxDQUFDTSxjQUFjLEdBQUcsTUFBTUEsY0FBYyxDQUFDO0VBQzVDSixXQUFXQSxDQUFBLEVBQUcsQ0FBQztFQUNmQyxPQUFPQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUk7RUFDWjtFQUNBQyxVQUFVQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUk7RUFDWjtFQUNBQyxTQUFTQSxDQUFBLEVBQUc7SUFDWCxPQUFPLElBQUk7RUFDWjtBQUNELENBQUM7O0FBRUQ7QUFDQSxNQUFNRSxnQkFBZ0IsR0FBRztFQUN4QkMsT0FBTyxFQUFFcEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQm9CLE9BQU8sRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDbEJxQixVQUFVLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ3JCc0IsS0FBSyxFQUFFdkIsSUFBSSxDQUFDQyxFQUFFLENBQUM7QUFDaEIsQ0FBQztBQUNEVyxNQUFNLENBQUNZLFlBQVksR0FBR0wsZ0JBQWdCOztBQUV0QztBQUNBLE1BQU1NLGtCQUFrQixHQUFHO0VBQzFCTCxPQUFPLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2xCb0IsT0FBTyxFQUFFckIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQnFCLFVBQVUsRUFBRXRCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDckJzQixLQUFLLEVBQUV2QixJQUFJLENBQUNDLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBQ0RXLE1BQU0sQ0FBQ2MsY0FBYyxHQUFHRCxrQkFBa0I7O0FBRTFDO0FBQ0FiLE1BQU0sQ0FBQ2UsT0FBTyxHQUFHO0VBQ2hCLEdBQUdBO0VBQ0g7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0QsQ0FBQzs7QUFFRDtBQUNBZixNQUFNLENBQUNnQixXQUFXLEdBQUdBLGlCQUFXO0FBQ2hDaEIsTUFBTSxDQUFDaUIsV0FBVyxHQUFHQSxpQkFBVyIsImlnbm9yZUxpc3QiOltdfQ==