3ac41c804743e9c563a7a88322cc42b3
"use strict";

// Mock the API service
_getJestObj().mock('../services/apiQuizzes');

// Mock useParams
_getJestObj().mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useParams: () => ({
    id: '1'
  }),
  useNavigate: () => jest.fn()
}));

// Mock the API response
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../context/AuthContext");
var _EditQuizPage = _interopRequireDefault(require("../pages/EditQuizPage"));
var _apiQuizzes = _interopRequireDefault(require("../services/apiQuizzes"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockQuizData = {
  data: {
    quiz_id: 1,
    quiz_title: 'Test Quiz',
    tag_color: '#EF4444',
    random_question_order: false,
    public: false,
    flashcard_quiz: false,
    quiz_image: 'quiz-image.jpg',
    date_created: '2024-01-01T00:00:00Z'
  },
  questions: [{
    id: 1,
    question: 'What is 2 + 2?',
    question_type: 'MUL',
    choices: ['3', '4', '5', '6'],
    correct_answer: '4',
    question_image: 'question1.jpg'
  }, {
    id: 2,
    question: 'Solve for x: x^2 = 4',
    question_type: 'MUL-COM',
    choices: ['x = 2', 'x = -2', 'x = ±2'],
    correct_answer: 'x = ±2'
  }]
};
const TestWrapper = ({
  children
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: children
    })
  });
};
describe('EditQuizPage', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    localStorage.clear();
  });
  describe('Data Loading', () => {
    test('should load quiz data on mount', async () => {
      _apiQuizzes.default.get.mockResolvedValue(mockQuizData);
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_apiQuizzes.default.get).toHaveBeenCalledWith('1/', {
          params: {
            randomize: false
          }
        });
      });
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
    });
    test('should handle loading state', () => {
      _apiQuizzes.default.get.mockImplementation(() => new Promise(() => {})); // Never resolves

      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      expect(_react2.screen.getByText('Loading...')).toBeInTheDocument();
    });
    test('should handle API errors', async () => {
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
      _apiQuizzes.default.get.mockRejectedValue(new Error('API Error'));
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(consoleSpy).toHaveBeenCalled();
      });
      consoleSpy.mockRestore();
    });
  });
  describe('Quiz Title Editing', () => {
    beforeEach(async () => {
      _apiQuizzes.default.get.mockResolvedValue(mockQuizData);
    });
    test('should allow editing quiz title', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const editButton = _react2.screen.getByRole('button', {
        name: /edit/i
      });
      _react2.fireEvent.click(editButton);
      const titleInput = _react2.screen.getByDisplayValue('Test Quiz');
      _react2.fireEvent.change(titleInput, {
        target: {
          value: 'Updated Quiz Title'
        }
      });
      const saveButton = _react2.screen.getByRole('button', {
        name: /check/i
      });
      _react2.fireEvent.click(saveButton);
      expect(_react2.screen.getByText('Updated Quiz Title')).toBeInTheDocument();
    });
    test('should cancel title editing', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const editButton = _react2.screen.getByRole('button', {
        name: /edit/i
      });
      _react2.fireEvent.click(editButton);
      const titleInput = _react2.screen.getByDisplayValue('Test Quiz');
      _react2.fireEvent.change(titleInput, {
        target: {
          value: 'Changed Title'
        }
      });
      const cancelButton = _react2.screen.getByRole('button', {
        name: /xmark/i
      });
      _react2.fireEvent.click(cancelButton);
      expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
    });
  });
  describe('Quiz Settings', () => {
    beforeEach(async () => {
      _apiQuizzes.default.get.mockResolvedValue(mockQuizData);
    });
    test('should change quiz type', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const flashcardButton = _react2.screen.getByText('Flashcard');
      _react2.fireEvent.click(flashcardButton);
      expect(flashcardButton).toHaveClass('bg-[#007AFF]');
    });
    test('should change visibility', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const publicButton = _react2.screen.getByText('Public');
      _react2.fireEvent.click(publicButton);
      expect(publicButton).toHaveClass('bg-[#007AFF]');
    });
    test('should change question order', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const randomButton = _react2.screen.getByText('Random');
      _react2.fireEvent.click(randomButton);
      expect(randomButton).toHaveClass('bg-[#007AFF]');
    });
  });
  describe('Question Management', () => {
    beforeEach(async () => {
      _apiQuizzes.default.get.mockResolvedValue(mockQuizData);
    });
    test('should add new question', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const addQuestionButton = _react2.screen.getByText('Add Question');
      _react2.fireEvent.click(addQuestionButton);

      // Should now have 3 questions (2 original + 1 new)
      expect(_react2.screen.getAllByText(/Question \d/)).toHaveLength(3);
    });
    test('should remove question', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const removeButtons = _react2.screen.getAllByRole('button', {
        name: /xmark/i
      });
      _react2.fireEvent.click(removeButtons[0]); // Remove first question

      // Should now have 1 question
      expect(_react2.screen.getAllByText(/Question \d/)).toHaveLength(1);
    });
    test('should edit question text', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const questionInputs = _react2.screen.getAllByPlaceholderText('Enter question text');
      _react2.fireEvent.change(questionInputs[0], {
        target: {
          value: 'Updated question text'
        }
      });
      expect(questionInputs[0]).toHaveValue('Updated question text');
    });
    test('should change question type', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const identificationButton = _react2.screen.getByText('Identification');
      _react2.fireEvent.click(identificationButton);
      expect(identificationButton).toHaveClass('bg-[#007AFF]');
    });
  });
  describe('Choice Management', () => {
    beforeEach(async () => {
      _apiQuizzes.default.get.mockResolvedValue(mockQuizData);
    });
    test('should add choice to question', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const addChoiceButtons = _react2.screen.getAllByRole('button', {
        name: /plus/i
      });
      _react2.fireEvent.click(addChoiceButtons[0]); // Add choice to first question

      // Should have more choice inputs
      const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
      expect(choiceInputs.length).toBeGreaterThan(4);
    });
    test('should remove choice from question', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const removeChoiceButtons = _react2.screen.getAllByRole('button', {
        name: /xmark/i
      });
      const choiceRemoveButtons = removeChoiceButtons.filter(button => button.closest('div')?.querySelector('input[placeholder*="Choice"]'));
      if (choiceRemoveButtons.length > 0) {
        _react2.fireEvent.click(choiceRemoveButtons[0]);

        // Should have fewer choice inputs
        const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
        expect(choiceInputs.length).toBeLessThan(4);
      }
    });
    test('should edit choice text', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
      _react2.fireEvent.change(choiceInputs[0], {
        target: {
          value: 'Updated choice'
        }
      });
      expect(choiceInputs[0]).toHaveValue('Updated choice');
    });
  });
  describe('Form Submission', () => {
    beforeEach(async () => {
      _apiQuizzes.default.get.mockResolvedValue(mockQuizData);
    });
    test('should submit updated quiz data', async () => {
      const mockUpdateResponse = {
        status: 200,
        data: {
          quiz: {
            quiz_id: 1,
            quiz_title: 'Updated Quiz'
          }
        }
      };
      _apiQuizzes.default.put.mockResolvedValue(mockUpdateResponse);
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const saveButton = _react2.screen.getByText('Save Changes');
      _react2.fireEvent.click(saveButton);
      await (0, _react2.waitFor)(() => {
        expect(_apiQuizzes.default.put).toHaveBeenCalledWith('quiz/update/1/', expect.any(Object));
      });
    });
    test('should handle submission errors', async () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});
      _apiQuizzes.default.put.mockRejectedValue(new Error('Update failed'));
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditQuizPage.default, {})
      }));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Test Quiz')).toBeInTheDocument();
      });
      const saveButton = _react2.screen.getByText('Save Changes');
      _react2.fireEvent.click(saveButton);
      await (0, _react2.waitFor)(() => {
        expect(consoleSpy).toHaveBeenCalled();
      });
      consoleSpy.mockRestore();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,