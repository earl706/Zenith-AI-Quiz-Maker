065d1e05830d8b68c4907c96435c28fc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _axios = _interopRequireDefault(require("axios"));
const inProduction = import.meta.env.VITE_IN_PRODUCTION;
const productionAPIURL = import.meta.env.VITE_PRODUCTION_API_URL;
const developmentAPIURL = import.meta.env.VITE_DEVELOPMENT_API_URL;
const APIURL = inProduction == 'true' ? productionAPIURL : developmentAPIURL;
const API = _axios.default.create({
  baseURL: APIURL
});

// Token expiration check
const isTokenExpired = token => {
  if (!token) return true;
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    return payload.exp * 1000 < Date.now();
  } catch (error) {
    return true;
  }
};

// Refresh token function
const refreshAccessToken = async () => {
  const refreshToken = localStorage.getItem('zenithQuizMakerRefreshToken');
  if (!refreshToken) {
    throw new Error('No refresh token available');
  }
  try {
    const response = await _axios.default.post(`${APIURL}api/users/token/refresh/`, {
      refresh: refreshToken
    });
    if (response.data.access) {
      localStorage.setItem('zenithQuizMakerAccessToken', response.data.access);
      if (response.data.refresh) {
        localStorage.setItem('zenithQuizMakerRefreshToken', response.data.refresh);
      }
      return response.data.access;
    }
  } catch (error) {
    // Clear tokens if refresh fails
    localStorage.removeItem('zenithQuizMakerAccessToken');
    localStorage.removeItem('zenithQuizMakerRefreshToken');
    localStorage.removeItem('userData');
    throw error;
  }
};
API.interceptors.request.use(async config => {
  let token = localStorage.getItem('zenithQuizMakerAccessToken');
  if (token && isTokenExpired(token)) {
    try {
      token = await refreshAccessToken();
    } catch (error) {
      // Redirect to login or handle token refresh failure
      window.location.href = '/login';
      return Promise.reject(error);
    }
  }
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Response interceptor to handle 401 errors
API.interceptors.response.use(response => response, async error => {
  const originalRequest = error.config;
  if (error.response?.status === 401 && !originalRequest._retry) {
    originalRequest._retry = true;
    try {
      const newToken = await refreshAccessToken();
      originalRequest.headers.Authorization = `Bearer ${newToken}`;
      return API(originalRequest);
    } catch (refreshError) {
      // Redirect to login if refresh fails
      window.location.href = '/login';
      return Promise.reject(refreshError);
    }
  }
  return Promise.reject(error);
});
var _default = exports.default = API;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImluUHJvZHVjdGlvbiIsImltcG9ydCIsIm1ldGEiLCJlbnYiLCJWSVRFX0lOX1BST0RVQ1RJT04iLCJwcm9kdWN0aW9uQVBJVVJMIiwiVklURV9QUk9EVUNUSU9OX0FQSV9VUkwiLCJkZXZlbG9wbWVudEFQSVVSTCIsIlZJVEVfREVWRUxPUE1FTlRfQVBJX1VSTCIsIkFQSVVSTCIsIkFQSSIsImF4aW9zIiwiY3JlYXRlIiwiYmFzZVVSTCIsImlzVG9rZW5FeHBpcmVkIiwidG9rZW4iLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNwbGl0IiwiZXhwIiwiRGF0ZSIsIm5vdyIsImVycm9yIiwicmVmcmVzaEFjY2Vzc1Rva2VuIiwicmVmcmVzaFRva2VuIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkVycm9yIiwicmVzcG9uc2UiLCJwb3N0IiwicmVmcmVzaCIsImRhdGEiLCJhY2Nlc3MiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJ1c2UiLCJjb25maWciLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJQcm9taXNlIiwicmVqZWN0IiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJvcmlnaW5hbFJlcXVlc3QiLCJzdGF0dXMiLCJfcmV0cnkiLCJuZXdUb2tlbiIsInJlZnJlc2hFcnJvciIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJhcGkuanN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNvbnN0IGluUHJvZHVjdGlvbiA9IGltcG9ydC5tZXRhLmVudi5WSVRFX0lOX1BST0RVQ1RJT047XG5jb25zdCBwcm9kdWN0aW9uQVBJVVJMID0gaW1wb3J0Lm1ldGEuZW52LlZJVEVfUFJPRFVDVElPTl9BUElfVVJMO1xuY29uc3QgZGV2ZWxvcG1lbnRBUElVUkwgPSBpbXBvcnQubWV0YS5lbnYuVklURV9ERVZFTE9QTUVOVF9BUElfVVJMO1xuXG5jb25zdCBBUElVUkwgPSBpblByb2R1Y3Rpb24gPT0gJ3RydWUnID8gcHJvZHVjdGlvbkFQSVVSTCA6IGRldmVsb3BtZW50QVBJVVJMO1xuXG5jb25zdCBBUEkgPSBheGlvcy5jcmVhdGUoe1xuXHRiYXNlVVJMOiBBUElVUkxcbn0pO1xuXG4vLyBUb2tlbiBleHBpcmF0aW9uIGNoZWNrXG5jb25zdCBpc1Rva2VuRXhwaXJlZCA9ICh0b2tlbikgPT4ge1xuXHRpZiAoIXRva2VuKSByZXR1cm4gdHJ1ZTtcblx0dHJ5IHtcblx0XHRjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZShhdG9iKHRva2VuLnNwbGl0KCcuJylbMV0pKTtcblx0XHRyZXR1cm4gcGF5bG9hZC5leHAgKiAxMDAwIDwgRGF0ZS5ub3coKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxuLy8gUmVmcmVzaCB0b2tlbiBmdW5jdGlvblxuY29uc3QgcmVmcmVzaEFjY2Vzc1Rva2VuID0gYXN5bmMgKCkgPT4ge1xuXHRjb25zdCByZWZyZXNoVG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnemVuaXRoUXVpek1ha2VyUmVmcmVzaFRva2VuJyk7XG5cdGlmICghcmVmcmVzaFRva2VuKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdObyByZWZyZXNoIHRva2VuIGF2YWlsYWJsZScpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoYCR7QVBJVVJMfWFwaS91c2Vycy90b2tlbi9yZWZyZXNoL2AsIHtcblx0XHRcdHJlZnJlc2g6IHJlZnJlc2hUb2tlblxuXHRcdH0pO1xuXG5cdFx0aWYgKHJlc3BvbnNlLmRhdGEuYWNjZXNzKSB7XG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnemVuaXRoUXVpek1ha2VyQWNjZXNzVG9rZW4nLCByZXNwb25zZS5kYXRhLmFjY2Vzcyk7XG5cdFx0XHRpZiAocmVzcG9uc2UuZGF0YS5yZWZyZXNoKSB7XG5cdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd6ZW5pdGhRdWl6TWFrZXJSZWZyZXNoVG9rZW4nLCByZXNwb25zZS5kYXRhLnJlZnJlc2gpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlLmRhdGEuYWNjZXNzO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBDbGVhciB0b2tlbnMgaWYgcmVmcmVzaCBmYWlsc1xuXHRcdGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd6ZW5pdGhRdWl6TWFrZXJBY2Nlc3NUb2tlbicpO1xuXHRcdGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd6ZW5pdGhRdWl6TWFrZXJSZWZyZXNoVG9rZW4nKTtcblx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlckRhdGEnKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufTtcblxuQVBJLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShhc3luYyAoY29uZmlnKSA9PiB7XG5cdGxldCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd6ZW5pdGhRdWl6TWFrZXJBY2Nlc3NUb2tlbicpO1xuXG5cdGlmICh0b2tlbiAmJiBpc1Rva2VuRXhwaXJlZCh0b2tlbikpIHtcblx0XHR0cnkge1xuXHRcdFx0dG9rZW4gPSBhd2FpdCByZWZyZXNoQWNjZXNzVG9rZW4oKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Ly8gUmVkaXJlY3QgdG8gbG9naW4gb3IgaGFuZGxlIHRva2VuIHJlZnJlc2ggZmFpbHVyZVxuXHRcdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2xvZ2luJztcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHRva2VuKSB7XG5cdFx0Y29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGBCZWFyZXIgJHt0b2tlbn1gO1xuXHR9XG5cdHJldHVybiBjb25maWc7XG59KTtcblxuLy8gUmVzcG9uc2UgaW50ZXJjZXB0b3IgdG8gaGFuZGxlIDQwMSBlcnJvcnNcbkFQSS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKFxuXHQocmVzcG9uc2UpID0+IHJlc3BvbnNlLFxuXHRhc3luYyAoZXJyb3IpID0+IHtcblx0XHRjb25zdCBvcmlnaW5hbFJlcXVlc3QgPSBlcnJvci5jb25maWc7XG5cblx0XHRpZiAoZXJyb3IucmVzcG9uc2U/LnN0YXR1cyA9PT0gNDAxICYmICFvcmlnaW5hbFJlcXVlc3QuX3JldHJ5KSB7XG5cdFx0XHRvcmlnaW5hbFJlcXVlc3QuX3JldHJ5ID0gdHJ1ZTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3QgbmV3VG9rZW4gPSBhd2FpdCByZWZyZXNoQWNjZXNzVG9rZW4oKTtcblx0XHRcdFx0b3JpZ2luYWxSZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGBCZWFyZXIgJHtuZXdUb2tlbn1gO1xuXHRcdFx0XHRyZXR1cm4gQVBJKG9yaWdpbmFsUmVxdWVzdCk7XG5cdFx0XHR9IGNhdGNoIChyZWZyZXNoRXJyb3IpIHtcblx0XHRcdFx0Ly8gUmVkaXJlY3QgdG8gbG9naW4gaWYgcmVmcmVzaCBmYWlsc1xuXHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvbG9naW4nO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QocmVmcmVzaEVycm9yKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHR9XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBBUEk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxNQUFNQyxZQUFZLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxHQUFHLENBQUNDLGtCQUFrQjtBQUN2RCxNQUFNQyxnQkFBZ0IsR0FBR0osTUFBTSxDQUFD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