864775195a217524393543d835acd309
"use strict";

// Mock MathRenderer
_getJestObj().mock('../components/MathRenderer', () => {
  return function MockMathRenderer({
    expression,
    displayMode
  }) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "data-testid": "math-renderer",
      "data-expression": expression,
      "data-display": displayMode,
      children: ["Math: ", expression]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _QuizFlashcardAttemptPage = _interopRequireDefault(require("../pages/QuizFlashcardAttemptPage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('QuizFlashcardAttemptPage', () => {
  const mockQuestions = [{
    id: 1,
    question: 'What is 2 + 2?',
    question_type: 'MUL',
    choices: ['3', '4', '5', '6'],
    correct_answer: '4'
  }, {
    id: 2,
    question: 'Solve for x: x^2 = 4',
    question_type: 'MUL-COM',
    choices: ['x = 2', 'x = -2', 'x = ±2'],
    correct_answer: 'x = ±2'
  }, {
    id: 3,
    question: 'What is the capital of France?',
    question_type: 'IDE',
    choices: ['Answer']
  }];
  const mockAnswers = [{
    id: 1,
    userAnswer: ''
  }, {
    id: 2,
    userAnswer: ''
  }, {
    id: 3,
    userAnswer: ''
  }];
  const mockHandlers = {
    submitAnswers: jest.fn(),
    handleAnswerChange: jest.fn(),
    handleIdentificationAnswerChange: jest.fn()
  };
  beforeEach(() => {
    jest.clearAllMocks();
  });
  describe('Navigation', () => {
    test('should navigate to next question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));

      // Should start with first question
      expect(_react2.screen.getByText('What is 2 + 2?')).toBeInTheDocument();
      expect(_react2.screen.getByText('Question 1 of 3')).toBeInTheDocument();

      // Click next
      _react2.fireEvent.click(_react2.screen.getByText('Next'));

      // Should show second question
      expect(_react2.screen.getByText('Solve for x: x^2 = 4')).toBeInTheDocument();
      expect(_react2.screen.getByText('Question 2 of 3')).toBeInTheDocument();
    });
    test('should navigate to previous question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));

      // Go to second question first
      _react2.fireEvent.click(_react2.screen.getByText('Next'));

      // Then go back
      _react2.fireEvent.click(_react2.screen.getByText('Prev'));

      // Should be back to first question
      expect(_react2.screen.getByText('What is 2 + 2?')).toBeInTheDocument();
      expect(_react2.screen.getByText('Question 1 of 3')).toBeInTheDocument();
    });
    test('should wrap around to first question when navigating past last question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));

      // Navigate to last question
      _react2.fireEvent.click(_react2.screen.getByText('Next'));
      _react2.fireEvent.click(_react2.screen.getByText('Next'));

      // Should be on third question
      expect(_react2.screen.getByText('What is the capital of France?')).toBeInTheDocument();
      expect(_react2.screen.getByText('Question 3 of 3')).toBeInTheDocument();

      // Navigate to next (should wrap to first)
      _react2.fireEvent.click(_react2.screen.getByText('Next'));

      // Should be back to first question
      expect(_react2.screen.getByText('What is 2 + 2?')).toBeInTheDocument();
      expect(_react2.screen.getByText('Question 1 of 3')).toBeInTheDocument();
    });
    test('should wrap around to last question when navigating before first question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));

      // Navigate to previous (should wrap to last)
      _react2.fireEvent.click(_react2.screen.getByText('Prev'));

      // Should be on last question
      expect(_react2.screen.getByText('What is the capital of France?')).toBeInTheDocument();
      expect(_react2.screen.getByText('Question 3 of 3')).toBeInTheDocument();
    });
  });
  describe('Question Rendering', () => {
    test('should render multiple choice question correctly', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));
      expect(_react2.screen.getByText('What is 2 + 2?')).toBeInTheDocument();
      expect(_react2.screen.getByText('3')).toBeInTheDocument();
      expect(_react2.screen.getByText('4')).toBeInTheDocument();
      expect(_react2.screen.getByText('5')).toBeInTheDocument();
      expect(_react2.screen.getByText('6')).toBeInTheDocument();
    });
    test('should render mathematical question with MathRenderer', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));

      // Navigate to second question (mathematical)
      _react2.fireEvent.click(_react2.screen.getByText('Next'));
      expect(_react2.screen.getByText('Solve for x: x^2 = 4')).toBeInTheDocument();
      expect(_react2.screen.getAllByTestId('math-renderer')).toHaveLength(3);
    });
    test('should render identification question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));

      // Navigate to third question (identification)
      _react2.fireEvent.click(_react2.screen.getByText('Next'));
      _react2.fireEvent.click(_react2.screen.getByText('Next'));
      expect(_react2.screen.getByText('What is the capital of France?')).toBeInTheDocument();
      // Should not show multiple choice buttons for identification
      expect(_react2.screen.queryByText('3')).not.toBeInTheDocument();
      expect(_react2.screen.queryByText('4')).not.toBeInTheDocument();
    });
    test('should handle question images', () => {
      const questionsWithImages = [{
        ...mockQuestions[0],
        question_image: 'question1.jpg'
      }];
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: questionsWithImages,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));
      const questionImage = _react2.screen.getByAltText('Question');
      expect(questionImage).toBeInTheDocument();
      expect(questionImage).toHaveAttribute('src', 'question1.jpg');
    });
    test('should handle choice images', () => {
      const questionsWithChoiceImages = [{
        ...mockQuestions[0],
        choices: [{
          text: 'Choice A',
          image: 'choice1.jpg'
        }, {
          text: 'Choice B',
          image: 'choice2.jpg'
        }]
      }];
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: questionsWithChoiceImages,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));
      const choiceImages = _react2.screen.getAllByAltText(/Choice \d/);
      expect(choiceImages).toHaveLength(2);
      expect(choiceImages[0]).toHaveAttribute('src', 'choice1.jpg');
      expect(choiceImages[1]).toHaveAttribute('src', 'choice2.jpg');
    });
  });
  describe('Answer Handling', () => {
    test('should handle choice selection for multiple choice', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));
      _react2.fireEvent.click(_react2.screen.getByText('4'));
      expect(mockHandlers.handleAnswerChange).toHaveBeenCalledWith(1, 'userAnswer', '4');
    });
    test('should highlight selected choice', () => {
      const answersWithSelection = [{
        id: 1,
        userAnswer: '4'
      }, {
        id: 2,
        userAnswer: ''
      }, {
        id: 3,
        userAnswer: ''
      }];
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: answersWithSelection
      }));
      const selectedChoice = _react2.screen.getByText('4');
      expect(selectedChoice.closest('button')).toHaveClass('bg-[#007AFF]');
    });
    test('should handle mathematical choice selection', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));

      // Navigate to mathematical question
      _react2.fireEvent.click(_react2.screen.getByText('Next'));

      // Click on a mathematical choice
      const mathChoice = _react2.screen.getByText('x = 2');
      _react2.fireEvent.click(mathChoice);
      expect(mockHandlers.handleAnswerChange).toHaveBeenCalledWith(2, 'userAnswer', 'x = 2');
    });
  });
  describe('Submit Functionality', () => {
    test('should call submitAnswers when submit button is clicked', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Submit'));
      expect(mockHandlers.submitAnswers).toHaveBeenCalled();
    });
  });
  describe('Loading State', () => {
    test('should show loading when no current question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: [],
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: []
      }));
      expect(_react2.screen.getByText('Loading...')).toBeInTheDocument();
    });
  });
  describe('Question Counter', () => {
    test('should display correct question counter', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizFlashcardAttemptPage.default, {
        questionsParam: mockQuestions,
        submitAnswers: mockHandlers.submitAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange,
        answers: mockAnswers
      }));
      expect(_react2.screen.getByText('Question 1 of 3')).toBeInTheDocument();

      // Navigate to second question
      _react2.fireEvent.click(_react2.screen.getByText('Next'));
      expect(_react2.screen.getByText('Question 2 of 3')).toBeInTheDocument();

      // Navigate to third question
      _react2.fireEvent.click(_react2.screen.getByText('Next'));
      expect(_react2.screen.getByText('Question 3 of 3')).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,