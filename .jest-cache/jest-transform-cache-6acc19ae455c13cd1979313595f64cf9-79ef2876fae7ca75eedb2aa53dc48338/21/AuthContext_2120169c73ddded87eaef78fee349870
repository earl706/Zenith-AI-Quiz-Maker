85b83cce5fb95a841f151eb6e005a17f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthProvider = exports.AuthContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _api = _interopRequireDefault(require("../services/api"));
var _apiQuizzes = _interopRequireDefault(require("../services/apiQuizzes"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const AuthContext = exports.AuthContext = /*#__PURE__*/(0, _react.createContext)();
const AuthProvider = ({
  children
}) => {
  const [user, setUser] = (0, _react.useState)(null);
  const [deleteMode, setDeleteMode] = (0, _react.useState)(false);
  const [quizzes, setQuizzes] = (0, _react.useState)([]);
  const [quizAttempt, setQuizAttempt] = (0, _react.useState)(false);
  const [isAuthenticated, setIsAuthenticated] = (0, _react.useState)(false);
  const [quizDeleteData, setQuizDeleteData] = (0, _react.useState)({
    quiz_id: '',
    questions: [],
    quiz_title: '',
    date_created: '',
    public: false,
    owner: 0
  });

  // Token management functions
  const getAccessToken = () => {
    return localStorage.getItem('zenithQuizMakerAccessToken');
  };
  const getRefreshToken = () => {
    return localStorage.getItem('zenithQuizMakerRefreshToken');
  };
  const setTokens = (access, refresh) => {
    localStorage.setItem('zenithQuizMakerAccessToken', access);
    localStorage.setItem('zenithQuizMakerRefreshToken', refresh);
  };
  const clearTokens = () => {
    localStorage.removeItem('zenithQuizMakerAccessToken');
    localStorage.removeItem('zenithQuizMakerRefreshToken');
    localStorage.removeItem('userData');
  };
  const isTokenExpired = token => {
    if (!token) return true;
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp * 1000 < Date.now();
    } catch (error) {
      return true;
    }
  };

  // Check authentication status on app load
  (0, _react.useEffect)(() => {
    const checkAuthStatus = async () => {
      const accessToken = getAccessToken();
      const refreshToken = getRefreshToken();
      if (accessToken && !isTokenExpired(accessToken)) {
        setIsAuthenticated(true);
        const userData = localStorage.getItem('userData');
        if (userData) {
          setUser(JSON.parse(userData));
        }
      } else if (refreshToken) {
        // Try to refresh the token
        try {
          const response = await refreshToken(refreshToken);
          if (response.data) {
            setTokens(response.data.access, response.data.refresh);
            setIsAuthenticated(true);
            const userData = localStorage.getItem('userData');
            if (userData) {
              setUser(JSON.parse(userData));
            }
          }
        } catch (error) {
          // Refresh failed, clear tokens
          clearTokens();
          setIsAuthenticated(false);
          setUser(null);
        }
      }
    };
    checkAuthStatus();
  }, []);
  const logout = () => {
    clearTokens();
    setUser(null);
    setIsAuthenticated(false);
    // Optionally call logout endpoint to invalidate refresh token
    // API.post('api/users/logout/', { refresh: getRefreshToken() });
  };
  const resendVerification = async email => {
    try {
      const resend_verification_response = await _api.default.post('api/users/email/resend/', {
        email: email
      });
    } catch (err) {
      return err;
    }
  };
  const login = async (username, password) => {
    try {
      const login_response = await _api.default.post('api/users/login/', {
        username: username,
        password: password
      });
      console.log(login_response);

      // Store tokens securely
      setTokens(login_response.data.access, login_response.data.refresh);
      localStorage.setItem('userData', JSON.stringify(login_response.data.user_data));

      // Update authentication state
      setIsAuthenticated(true);
      setUser(login_response.data.user_data);
      return login_response;
    } catch (err) {
      console.log(err);
      return err;
    }
  };
  const refreshToken = async refresh_token => {
    try {
      const refresh_token_response = await _api.default.post('api/users/token/refresh/', {
        refresh: refresh_token
      });

      // Update stored tokens if refresh was successful
      if (refresh_token_response.data && refresh_token_response.data.access) {
        setTokens(refresh_token_response.data.access, refresh_token_response.data.refresh || refresh_token);
      }
      return refresh_token_response;
    } catch (err) {
      // If refresh fails, clear tokens and logout
      clearTokens();
      setIsAuthenticated(false);
      setUser(null);
      return err;
    }
  };
  const register = async data => {
    try {
      const register_response = await _api.default.post('dj-rest-auth/registration/', data);
      return register_response;
    } catch (error) {
      return error;
    }
  };
  const getUserData = async () => {
    try {
      const user_data_response = await _api.default.get('api/users/profile/');
      return user_data_response;
    } catch (err) {
      return err;
    }
  };
  const getAttemptsList = async () => {
    try {
      const attempts_data_response = await _apiQuizzes.default.get('quiz/attempts/');
      return attempts_data_response;
    } catch (err) {
      return err;
    }
  };
  const updateUserData = async userEditData => {
    try {
      const user_update_response = await _api.default.put('api/users/profile/', userEditData);
      return user_update_response;
    } catch (err) {
      return err;
    }
  };
  const createQuiz = async quizData => {
    try {
      const createquiz_response = await _apiQuizzes.default.post('quiz/', quizData);
      return createquiz_response;
    } catch (err) {
      return err;
    }
  };
  const updateQuiz = async (id, quizEditData) => {
    try {
      const quiz_update_response = await _apiQuizzes.default.put(`quiz/update/${id}/`, quizEditData);
      return quiz_update_response;
    } catch (err) {
      return err;
    }
  };
  const getQuizList = async () => {
    try {
      const getquizlist_response = await _apiQuizzes.default.get('quiz/');
      return getquizlist_response;
    } catch (err) {
      return err;
    }
  };
  const getQuiz = async (id, randomize = true) => {
    try {
      const getquiz_response = await _apiQuizzes.default.get(`quiz/${id}/`, {
        params: {
          randomize: randomize
        }
      });
      return getquiz_response;
    } catch (err) {
      return err;
    }
  };
  const getQuizSummary = async id => {
    try {
      const quiz_summary_response = await _apiQuizzes.default.get(`quiz/summary/${id}/`);
      return quiz_summary_response;
    } catch (err) {
      return err;
    }
  };
  const attemptQuiz = async id => {
    try {
      const quiz_attempt_response = await _apiQuizzes.default.post(`quiz/attempt/${id}/`);
      return quiz_attempt_response;
    } catch (err) {
      return err;
    }
  };
  const submitQuizAnswers = async (id, answers, time) => {
    try {
      const quiz_answers_submission_response = await _apiQuizzes.default.post(`quiz/submit/${id}/`, {
        answers: answers,
        time: time
      });
      return quiz_answers_submission_response;
    } catch (err) {
      return err;
    }
  };
  const deleteQuiz = async id => {
    try {
      const deletequiz_response = await _apiQuizzes.default.delete(`quiz/${id}/`);
      return deletequiz_response;
    } catch (err) {
      return err;
    }
  };
  const generateQuiz = async (topic, questionNumber) => {
    try {
      const response = await _apiQuizzes.default.post('quiz/generate/', {
        topic: topic,
        questionNumber: questionNumber
      });
      return response;
    } catch (err) {
      return err;
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(AuthContext.Provider, {
    value: {
      user,
      isAuthenticated,
      login,
      logout,
      register,
      getUserData,
      updateUserData,
      refreshToken,
      getAccessToken,
      getRefreshToken,
      isTokenExpired,
      quizzes,
      setQuizzes,
      createQuiz,
      updateQuiz,
      generateQuiz,
      getQuizList,
      getQuiz,
      getQuizSummary,
      attemptQuiz,
      getAttemptsList,
      deleteMode,
      submitQuizAnswers,
      deleteQuiz,
      setDeleteMode,
      quizDeleteData,
      setQuizDeleteData
    },
    children: children
  });
};
exports.AuthProvider = AuthProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,