3587280a47a1ea83a797366db0cf1169
"use strict";

// Mock MathRenderer for testing
_getJestObj().mock('../components/MathRenderer', () => {
  return function MockMathRenderer({
    expression,
    displayMode
  }) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "data-testid": "math-renderer",
      "data-expression": expression,
      "data-display": displayMode,
      children: ["Math: ", expression]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _QuestionCard = _interopRequireDefault(require("../components/QuestionCard"));
var _MathRenderer = _interopRequireDefault(require("../components/MathRenderer"));
var _QuizResultsPage = _interopRequireDefault(require("../pages/QuizResultsPage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('Quiz Components', () => {
  describe('QuestionCard', () => {
    const mockQuestion = {
      id: 1,
      question: 'What is 2 + 2?',
      question_type: 'MUL',
      choices: ['3', '4', '5', '6'],
      correct_answer: '4'
    };
    const mockAnswers = [{
      id: 1,
      userAnswer: '4'
    }];
    const mockHandlers = {
      handleAnswerChange: jest.fn(),
      handleIdentificationAnswerChange: jest.fn()
    };
    beforeEach(() => {
      jest.clearAllMocks();
    });
    test('should render multiple choice question correctly', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuestionCard.default, {
        question: mockQuestion,
        answers: mockAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange
      }));
      expect(_react2.screen.getByText('What is 2 + 2?')).toBeInTheDocument();
      expect(_react2.screen.getByText('3')).toBeInTheDocument();
      expect(_react2.screen.getByText('4')).toBeInTheDocument();
      expect(_react2.screen.getByText('5')).toBeInTheDocument();
      expect(_react2.screen.getByText('6')).toBeInTheDocument();
    });
    test('should handle choice selection', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuestionCard.default, {
        question: mockQuestion,
        answers: mockAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange
      }));
      _react2.fireEvent.click(_react2.screen.getByText('4'));
      expect(mockHandlers.handleAnswerChange).toHaveBeenCalledWith(1, 'userAnswer', '4');
    });
    test('should render mathematical question with MathRenderer', () => {
      const mathQuestion = {
        ...mockQuestion,
        question_type: 'MUL-COM',
        choices: ['x^2', 'x^3', 'x^4']
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuestionCard.default, {
        question: mathQuestion,
        answers: mockAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange
      }));
      expect(_react2.screen.getAllByTestId('math-renderer')).toHaveLength(3);
      expect(_react2.screen.getByTestId('math-renderer')).toHaveAttribute('data-expression', 'x^2');
    });
    test('should render identification question', () => {
      const identificationQuestion = {
        ...mockQuestion,
        question_type: 'IDE',
        choices: ['Answer']
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuestionCard.default, {
        question: identificationQuestion,
        answers: mockAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange
      }));

      // Should render IdentificationAnswerInput instead of choices
      expect(_react2.screen.queryByText('3')).not.toBeInTheDocument();
      expect(_react2.screen.queryByText('4')).not.toBeInTheDocument();
    });
    test('should handle choice images', () => {
      const questionWithImages = {
        ...mockQuestion,
        choices: [{
          text: 'Choice A',
          image: 'image1.jpg'
        }, {
          text: 'Choice B',
          image: 'image2.jpg'
        }]
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuestionCard.default, {
        question: questionWithImages,
        answers: mockAnswers,
        handleAnswerChange: mockHandlers.handleAnswerChange,
        handleIdentificationAnswerChange: mockHandlers.handleIdentificationAnswerChange
      }));
      const images = _react2.screen.getAllByAltText(/Choice \d/);
      expect(images).toHaveLength(2);
      expect(images[0]).toHaveAttribute('src', 'image1.jpg');
      expect(images[1]).toHaveAttribute('src', 'image2.jpg');
    });
  });
  describe('MathRenderer', () => {
    test('should render mathematical expression', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_MathRenderer.default, {
        expression: "x^2 + 2x + 1",
        displayMode: false
      }));
      expect(_react2.screen.getByTestId('math-renderer')).toBeInTheDocument();
      expect(_react2.screen.getByTestId('math-renderer')).toHaveAttribute('data-expression', 'x^2 + 2x + 1');
      expect(_react2.screen.getByTestId('math-renderer')).toHaveAttribute('data-display', 'false');
    });
    test('should render in display mode', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_MathRenderer.default, {
        expression: "\\\\frac{1}{2}",
        displayMode: true
      }));
      expect(_react2.screen.getByTestId('math-renderer')).toHaveAttribute('data-display', 'true');
    });
    test('should handle empty expression', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_MathRenderer.default, {
        expression: "",
        displayMode: false
      }));
      expect(_react2.screen.getByText('Empty')).toBeInTheDocument();
    });
  });
  describe('QuizResultsPage', () => {
    const mockQuestion = {
      id: 1,
      question: 'What is 2 + 2?',
      question_type: 'MUL',
      choices: ['3', '4', '5', '6'],
      correct_answer: '4'
    };
    const mockSubmittedAnswers = [{
      correctAnswer: '4',
      userAnswer: '4'
    }];
    beforeEach(() => {
      jest.clearAllMocks();
    });
    test('should render correct answer with green background', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizResultsPage.default, {
        question: mockQuestion,
        answer: {
          id: 1,
          userAnswer: '4'
        },
        correct: true,
        submittedAnswers: mockSubmittedAnswers,
        index: 0
      }));
      const correctChoice = _react2.screen.getByText('4');
      expect(correctChoice).toBeInTheDocument();
      expect(correctChoice.closest('div')).toHaveClass('bg-[#00CA4E]');
    });
    test('should render incorrect answer with red background', () => {
      const incorrectSubmittedAnswers = [{
        correctAnswer: '4',
        userAnswer: '3'
      }];
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizResultsPage.default, {
        question: mockQuestion,
        answer: {
          id: 1,
          userAnswer: '3'
        },
        correct: false,
        submittedAnswers: incorrectSubmittedAnswers,
        index: 0
      }));
      const incorrectChoice = _react2.screen.getByText('3');
      expect(incorrectChoice).toBeInTheDocument();
      expect(incorrectChoice.closest('div')).toHaveClass('bg-[#FF605C]');
    });
    test('should render identification question results', () => {
      const identificationQuestion = {
        ...mockQuestion,
        question_type: 'IDE',
        choices: ['Answer']
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizResultsPage.default, {
        question: identificationQuestion,
        answer: {
          id: 1,
          userAnswer: 'Answer'
        },
        correct: true,
        submittedAnswers: mockSubmittedAnswers,
        index: 0
      }));
      expect(_react2.screen.getByText('Correct Answer:')).toBeInTheDocument();
      expect(_react2.screen.getByText('Your Answer:')).toBeInTheDocument();
    });
    test('should render mathematical question results', () => {
      const mathQuestion = {
        ...mockQuestion,
        question_type: 'MUL-COM',
        choices: ['x^2', 'x^3', 'x^4']
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizResultsPage.default, {
        question: mathQuestion,
        answer: {
          id: 1,
          userAnswer: 'x^2'
        },
        correct: true,
        submittedAnswers: mockSubmittedAnswers,
        index: 0
      }));
      expect(_react2.screen.getAllByTestId('math-renderer')).toHaveLength(3);
    });
    test('should handle question images', () => {
      const questionWithImage = {
        ...mockQuestion,
        question_image: 'question.jpg'
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizResultsPage.default, {
        question: questionWithImage,
        answer: {
          id: 1,
          userAnswer: '4'
        },
        correct: true,
        submittedAnswers: mockSubmittedAnswers,
        index: 0
      }));
      const questionImage = _react2.screen.getByAltText('Question');
      expect(questionImage).toBeInTheDocument();
      expect(questionImage).toHaveAttribute('src', 'question.jpg');
    });
    test('should handle choice images', () => {
      const questionWithChoiceImages = {
        ...mockQuestion,
        choices: [{
          text: 'Choice A',
          image: 'choice1.jpg'
        }, {
          text: 'Choice B',
          image: 'choice2.jpg'
        }]
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_QuizResultsPage.default, {
        question: questionWithChoiceImages,
        answer: {
          id: 1,
          userAnswer: 'Choice A'
        },
        correct: true,
        submittedAnswers: mockSubmittedAnswers,
        index: 0
      }));
      const choiceImages = _react2.screen.getAllByAltText(/Choice \d/);
      expect(choiceImages).toHaveLength(2);
      expect(choiceImages[0]).toHaveAttribute('src', 'choice1.jpg');
      expect(choiceImages[1]).toHaveAttribute('src', 'choice2.jpg');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,