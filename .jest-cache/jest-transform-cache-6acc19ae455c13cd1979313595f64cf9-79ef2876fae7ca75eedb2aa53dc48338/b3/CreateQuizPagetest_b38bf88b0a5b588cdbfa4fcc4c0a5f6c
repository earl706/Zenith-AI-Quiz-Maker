2937764e250d2ce39c26099a5a88d6c6
"use strict";

// Mock the AuthContext
_getJestObj().mock('../context/AuthContext', () => ({
  ...jest.requireActual('../context/AuthContext'),
  useAuth: () => ({
    createQuiz: jest.fn(),
    quizzes: [],
    setQuizzes: jest.fn()
  })
}));

// Mock useNavigate

_getJestObj().mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => mockNavigate
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../context/AuthContext");
var _CreateQuizPage = _interopRequireDefault(require("../pages/CreateQuizPage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockNavigate = jest.fn();
const TestWrapper = ({
  children
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: children
    })
  });
};
describe('CreateQuizPage', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  describe('Initial Rendering', () => {
    test('should render quiz creation form', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      expect(_react2.screen.getByText('Create Quiz')).toBeInTheDocument();
      expect(_react2.screen.getByPlaceholderText('Enter quiz title')).toBeInTheDocument();
      expect(_react2.screen.getByText('Add Question')).toBeInTheDocument();
      expect(_react2.screen.getByText('Create Quiz')).toBeInTheDocument();
    });
    test('should show initial question form', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      expect(_react2.screen.getByText('Question 1')).toBeInTheDocument();
      expect(_react2.screen.getByPlaceholderText('Enter question text')).toBeInTheDocument();
      expect(_react2.screen.getByText('Multiple Choice')).toBeInTheDocument();
      expect(_react2.screen.getByText('Identification')).toBeInTheDocument();
    });
  });
  describe('Quiz Title and Settings', () => {
    test('should update quiz title', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const titleInput = _react2.screen.getByPlaceholderText('Enter quiz title');
      _react2.fireEvent.change(titleInput, {
        target: {
          value: 'My Test Quiz'
        }
      });
      expect(titleInput).toHaveValue('My Test Quiz');
    });
    test('should change quiz type to flashcard', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const flashcardButton = _react2.screen.getByText('Flashcard');
      _react2.fireEvent.click(flashcardButton);
      expect(flashcardButton).toHaveClass('bg-[#007AFF]');
    });
    test('should change visibility to public', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const publicButton = _react2.screen.getByText('Public');
      _react2.fireEvent.click(publicButton);
      expect(publicButton).toHaveClass('bg-[#007AFF]');
    });
    test('should change question order to random', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const randomButton = _react2.screen.getByText('Random');
      _react2.fireEvent.click(randomButton);
      expect(randomButton).toHaveClass('bg-[#007AFF]');
    });
    test('should change tag color', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const colorButton = _react2.screen.getByTestId('color-EF4444');
      _react2.fireEvent.click(colorButton);
      expect(colorButton).toHaveClass('ring-2');
    });
  });
  describe('Question Management', () => {
    test('should add new question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const addQuestionButton = _react2.screen.getByText('Add Question');
      _react2.fireEvent.click(addQuestionButton);
      expect(_react2.screen.getAllByText(/Question \d/)).toHaveLength(2);
    });
    test('should remove question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));

      // Add a question first
      const addQuestionButton = _react2.screen.getByText('Add Question');
      _react2.fireEvent.click(addQuestionButton);

      // Now remove the second question
      const removeButtons = _react2.screen.getAllByRole('button', {
        name: /xmark/i
      });
      _react2.fireEvent.click(removeButtons[1]); // Remove second question

      expect(_react2.screen.getAllByText(/Question \d/)).toHaveLength(1);
    });
    test('should update question text', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const questionInput = _react2.screen.getByPlaceholderText('Enter question text');
      _react2.fireEvent.change(questionInput, {
        target: {
          value: 'What is 2 + 2?'
        }
      });
      expect(questionInput).toHaveValue('What is 2 + 2?');
    });
    test('should change question type to identification', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const identificationButton = _react2.screen.getByText('Identification');
      _react2.fireEvent.click(identificationButton);
      expect(identificationButton).toHaveClass('bg-[#007AFF]');
    });
    test('should toggle mathematical question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const mathematicalButton = _react2.screen.getByText('Mathematical');
      _react2.fireEvent.click(mathematicalButton);
      expect(mathematicalButton).toHaveClass('bg-[#007AFF]');
    });
  });
  describe('Choice Management', () => {
    test('should add choice to question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const addChoiceButtons = _react2.screen.getAllByRole('button', {
        name: /plus/i
      });
      _react2.fireEvent.click(addChoiceButtons[0]); // Add choice to first question

      const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
      expect(choiceInputs.length).toBeGreaterThan(4);
    });
    test('should remove choice from question', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const removeChoiceButtons = _react2.screen.getAllByRole('button', {
        name: /xmark/i
      });
      const choiceRemoveButtons = removeChoiceButtons.filter(button => button.closest('div')?.querySelector('input[placeholder*="Choice"]'));
      if (choiceRemoveButtons.length > 0) {
        _react2.fireEvent.click(choiceRemoveButtons[0]);
        const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
        expect(choiceInputs.length).toBeLessThan(4);
      }
    });
    test('should update choice text', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
      _react2.fireEvent.change(choiceInputs[0], {
        target: {
          value: 'Choice A'
        }
      });
      expect(choiceInputs[0]).toHaveValue('Choice A');
    });
    test('should set correct answer', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
      _react2.fireEvent.change(choiceInputs[0], {
        target: {
          value: 'Correct Answer'
        }
      });
      const correctAnswerButtons = _react2.screen.getAllByRole('button', {
        name: /check/i
      });
      _react2.fireEvent.click(correctAnswerButtons[0]); // Set first choice as correct

      expect(correctAnswerButtons[0]).toHaveClass('bg-[#00CA4E]');
    });
  });
  describe('Image Upload', () => {
    test('should handle quiz image upload', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const quizImageInput = _react2.screen.getByLabelText(/quiz image/i);
      const file = new File(['test'], 'test.jpg', {
        type: 'image/jpeg'
      });
      _react2.fireEvent.change(quizImageInput, {
        target: {
          files: [file]
        }
      });
      expect(quizImageInput.files[0]).toBe(file);
    });
    test('should handle question image upload', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const questionImageInput = _react2.screen.getByLabelText(/question image/i);
      const file = new File(['test'], 'question.jpg', {
        type: 'image/jpeg'
      });
      _react2.fireEvent.change(questionImageInput, {
        target: {
          files: [file]
        }
      });
      expect(questionImageInput.files[0]).toBe(file);
    });
    test('should handle choice image upload', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const choiceImageInputs = _react2.screen.getAllByLabelText(/choice image/i);
      const file = new File(['test'], 'choice.jpg', {
        type: 'image/jpeg'
      });
      _react2.fireEvent.change(choiceImageInputs[0], {
        target: {
          files: [file]
        }
      });
      expect(choiceImageInputs[0].files[0]).toBe(file);
    });
  });
  describe('Form Submission', () => {
    test('should submit quiz with valid data', async () => {
      const mockCreateQuiz = jest.fn().mockResolvedValue({
        status: 200,
        data: {
          quiz: {
            quiz_id: 1,
            quiz_title: 'Test Quiz'
          }
        }
      });
      jest.spyOn(require('../context/AuthContext'), 'useAuth').mockReturnValue({
        createQuiz: mockCreateQuiz,
        quizzes: [],
        setQuizzes: jest.fn()
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));

      // Fill in required fields
      const titleInput = _react2.screen.getByPlaceholderText('Enter quiz title');
      _react2.fireEvent.change(titleInput, {
        target: {
          value: 'Test Quiz'
        }
      });
      const questionInput = _react2.screen.getByPlaceholderText('Enter question text');
      _react2.fireEvent.change(questionInput, {
        target: {
          value: 'What is 2 + 2?'
        }
      });
      const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
      _react2.fireEvent.change(choiceInputs[0], {
        target: {
          value: '4'
        }
      });
      const correctAnswerButton = _react2.screen.getAllByRole('button', {
        name: /check/i
      })[0];
      _react2.fireEvent.click(correctAnswerButton);
      const createButton = _react2.screen.getByText('Create Quiz');
      _react2.fireEvent.click(createButton);
      await (0, _react2.waitFor)(() => {
        expect(mockCreateQuiz).toHaveBeenCalled();
      });
    });
    test('should handle submission errors', async () => {
      const mockCreateQuiz = jest.fn().mockRejectedValue(new Error('Creation failed'));
      jest.spyOn(require('../context/AuthContext'), 'useAuth').mockReturnValue({
        createQuiz: mockCreateQuiz,
        quizzes: [],
        setQuizzes: jest.fn()
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));

      // Fill in required fields
      const titleInput = _react2.screen.getByPlaceholderText('Enter quiz title');
      _react2.fireEvent.change(titleInput, {
        target: {
          value: 'Test Quiz'
        }
      });
      const questionInput = _react2.screen.getByPlaceholderText('Enter question text');
      _react2.fireEvent.change(questionInput, {
        target: {
          value: 'What is 2 + 2?'
        }
      });
      const choiceInputs = _react2.screen.getAllByPlaceholderText(/Choice \d/);
      _react2.fireEvent.change(choiceInputs[0], {
        target: {
          value: '4'
        }
      });
      const correctAnswerButton = _react2.screen.getAllByRole('button', {
        name: /check/i
      })[0];
      _react2.fireEvent.click(correctAnswerButton);
      const createButton = _react2.screen.getByText('Create Quiz');
      _react2.fireEvent.click(createButton);
      await (0, _react2.waitFor)(() => {
        expect(mockCreateQuiz).toHaveBeenCalled();
      });
    });
  });
  describe('Validation', () => {
    test('should require quiz title', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const createButton = _react2.screen.getByText('Create Quiz');
      _react2.fireEvent.click(createButton);

      // Should not submit without title
      expect(_react2.screen.getByPlaceholderText('Enter quiz title')).toBeInTheDocument();
    });
    test('should require question text', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const titleInput = _react2.screen.getByPlaceholderText('Enter quiz title');
      _react2.fireEvent.change(titleInput, {
        target: {
          value: 'Test Quiz'
        }
      });
      const createButton = _react2.screen.getByText('Create Quiz');
      _react2.fireEvent.click(createButton);

      // Should not submit without question text
      expect(_react2.screen.getByPlaceholderText('Enter question text')).toBeInTheDocument();
    });
    test('should require at least one choice', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CreateQuizPage.default, {})
      }));
      const titleInput = _react2.screen.getByPlaceholderText('Enter quiz title');
      _react2.fireEvent.change(titleInput, {
        target: {
          value: 'Test Quiz'
        }
      });
      const questionInput = _react2.screen.getByPlaceholderText('Enter question text');
      _react2.fireEvent.change(questionInput, {
        target: {
          value: 'What is 2 + 2?'
        }
      });
      const createButton = _react2.screen.getByText('Create Quiz');
      _react2.fireEvent.click(createButton);

      // Should not submit without choices
      expect(_react2.screen.getAllByPlaceholderText(/Choice \d/).length).toBeGreaterThan(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,