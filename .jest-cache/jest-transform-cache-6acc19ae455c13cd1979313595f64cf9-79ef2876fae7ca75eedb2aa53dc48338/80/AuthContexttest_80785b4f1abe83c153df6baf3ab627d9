344c41c3d05398db53044a83bae7b704
"use strict";

// Mock the API services
_getJestObj().mock('../services/api');
_getJestObj().mock('../services/apiQuizzes');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _AuthContext = require("../context/AuthContext");
var _api = _interopRequireDefault(require("../services/api"));
var _apiQuizzes = _interopRequireDefault(require("../services/apiQuizzes"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockAPI = _api.default;
const mockAPIQuizzes = _apiQuizzes.default;

// Test wrapper component
const TestComponent = ({
  children
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
    children: children
  });
};

// Custom hook to access context
const useAuth = () => {
  const context = _react.default.useContext(_AuthContext.AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
describe('AuthContext', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    localStorage.clear();
  });
  describe('Token Management', () => {
    test('should store tokens in localStorage after login', async () => {
      const mockLoginResponse = {
        data: {
          access: 'mock-access-token',
          refresh: 'mock-refresh-token',
          user_data: {
            id: 1,
            username: 'testuser'
          }
        }
      };
      mockAPI.post.mockResolvedValue(mockLoginResponse);
      const TestLogin = () => {
        const {
          login
        } = useAuth();
        const handleLogin = async () => {
          await login('testuser', 'password');
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: handleLogin,
          children: "Login"
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestLogin, {})
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Login'));
      await (0, _react2.waitFor)(() => {
        expect(localStorage.getItem('zenithQuizMakerAccessToken')).toBe('mock-access-token');
        expect(localStorage.getItem('zenithQuizMakerRefreshToken')).toBe('mock-refresh-token');
        expect(localStorage.getItem('userData')).toBe(JSON.stringify({
          id: 1,
          username: 'testuser'
        }));
      });
    });
    test('should clear tokens on logout', () => {
      // Set up initial tokens
      localStorage.setItem('zenithQuizMakerAccessToken', 'test-token');
      localStorage.setItem('zenithQuizMakerRefreshToken', 'test-refresh');
      localStorage.setItem('userData', '{"id": 1}');
      const TestLogout = () => {
        const {
          logout
        } = useAuth();
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: logout,
          children: "Logout"
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestLogout, {})
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Logout'));
      expect(localStorage.getItem('zenithQuizMakerAccessToken')).toBeNull();
      expect(localStorage.getItem('zenithQuizMakerRefreshToken')).toBeNull();
      expect(localStorage.getItem('userData')).toBeNull();
    });
    test('should check if token is expired', () => {
      const TestTokenCheck = () => {
        const {
          isTokenExpired
        } = useAuth();

        // Create a token that expires in the past
        const expiredToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MzQ1Njc4NzF9.signature';
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            "data-testid": "expired",
            children: isTokenExpired(expiredToken).toString()
          })
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestTokenCheck, {})
      }));
      expect(_react2.screen.getByTestId('expired').textContent).toBe('true');
    });
  });
  describe('API Calls', () => {
    test('should call login API with correct parameters', async () => {
      const mockLoginResponse = {
        data: {
          access: 'mock-access-token',
          refresh: 'mock-refresh-token',
          user_data: {
            id: 1,
            username: 'testuser'
          }
        }
      };
      mockAPI.post.mockResolvedValue(mockLoginResponse);
      const TestLogin = () => {
        const {
          login
        } = useAuth();
        const handleLogin = async () => {
          await login('testuser', 'password');
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: handleLogin,
          children: "Login"
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestLogin, {})
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Login'));
      await (0, _react2.waitFor)(() => {
        expect(mockAPI.post).toHaveBeenCalledWith('api/users/login/', {
          username: 'testuser',
          password: 'password'
        });
      });
    });
    test('should call createQuiz API with correct data', async () => {
      const mockCreateResponse = {
        data: {
          quiz: {
            quiz_id: 1,
            quiz_title: 'Test Quiz'
          }
        }
      };
      mockAPIQuizzes.post.mockResolvedValue(mockCreateResponse);
      const TestCreateQuiz = () => {
        const {
          createQuiz
        } = useAuth();
        const handleCreate = async () => {
          const quizData = {
            quiz_title: 'Test Quiz',
            public: false,
            questions: []
          };
          await createQuiz(quizData);
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: handleCreate,
          children: "Create Quiz"
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestCreateQuiz, {})
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Create Quiz'));
      await (0, _react2.waitFor)(() => {
        expect(mockAPIQuizzes.post).toHaveBeenCalledWith('quiz/', {
          quiz_title: 'Test Quiz',
          public: false,
          questions: []
        });
      });
    });
    test('should call updateQuiz API with correct data', async () => {
      const mockUpdateResponse = {
        data: {
          quiz: {
            quiz_id: 1,
            quiz_title: 'Updated Quiz'
          }
        }
      };
      mockAPIQuizzes.put.mockResolvedValue(mockUpdateResponse);
      const TestUpdateQuiz = () => {
        const {
          updateQuiz
        } = useAuth();
        const handleUpdate = async () => {
          const quizData = {
            quiz_title: 'Updated Quiz',
            public: true,
            questions: []
          };
          await updateQuiz(1, quizData);
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: handleUpdate,
          children: "Update Quiz"
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestUpdateQuiz, {})
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Update Quiz'));
      await (0, _react2.waitFor)(() => {
        expect(mockAPIQuizzes.put).toHaveBeenCalledWith('quiz/update/1/', {
          quiz_title: 'Updated Quiz',
          public: true,
          questions: []
        });
      });
    });
  });
  describe('Error Handling', () => {
    test('should handle login errors gracefully', async () => {
      const mockError = new Error('Invalid credentials');
      mockAPI.post.mockRejectedValue(mockError);
      const TestLoginError = () => {
        const {
          login
        } = useAuth();
        const [error, setError] = _react.default.useState(null);
        const handleLogin = async () => {
          try {
            await login('wronguser', 'wrongpass');
          } catch (err) {
            setError(err.message);
          }
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: handleLogin,
            children: "Login"
          }), error && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            "data-testid": "error",
            children: error
          })]
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestLoginError, {})
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Login'));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByTestId('error').textContent).toBe('Invalid credentials');
      });
    });
    test('should handle API errors in quiz operations', async () => {
      const mockError = new Error('Network error');
      mockAPIQuizzes.post.mockRejectedValue(mockError);
      const TestCreateError = () => {
        const {
          createQuiz
        } = useAuth();
        const [error, setError] = _react.default.useState(null);
        const handleCreate = async () => {
          try {
            await createQuiz({});
          } catch (err) {
            setError(err.message);
          }
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            onClick: handleCreate,
            children: "Create"
          }), error && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            "data-testid": "error",
            children: error
          })]
        });
      };
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestCreateError, {})
      }));
      _react2.fireEvent.click(_react2.screen.getByText('Create'));
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByTestId('error').textContent).toBe('Network error');
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,