726b91e2a8ceb5eaf7897ff79b41843b
"use strict";

require("@testing-library/jest-dom");
// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    // deprecated
    removeListener: jest.fn(),
    // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  observe() {
    return null;
  }
  disconnect() {
    return null;
  }
  unobserve() {
    return null;
  }
};

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor() {}
  observe() {
    return null;
  }
  disconnect() {
    return null;
  }
  unobserve() {
    return null;
  }
};

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock;

// Mock sessionStorage
const sessionStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;

// Mock console methods to reduce noise in tests
global.console = {
  ...console
  // Uncomment to ignore a specific log level
  // log: jest.fn(),
  // debug: jest.fn(),
  // info: jest.fn(),
  // warn: jest.fn(),
  // error: jest.fn(),
};

// Mock TextEncoder and TextDecoder for Node.js environment
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwiamVzdCIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJnbG9iYWwiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImNvbnN0cnVjdG9yIiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJ1bm9ic2VydmUiLCJSZXNpemVPYnNlcnZlciIsImxvY2FsU3RvcmFnZU1vY2siLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlTW9jayIsInNlc3Npb25TdG9yYWdlIiwiY29uc29sZSIsIlRleHRFbmNvZGVyIiwiVGV4dERlY29kZXIiXSwic291cmNlcyI6WyJzZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuXG4vLyBNb2NrIHdpbmRvdy5tYXRjaE1lZGlhXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbWF0Y2hNZWRpYScsIHtcblx0d3JpdGFibGU6IHRydWUsXG5cdHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChxdWVyeSkgPT4gKHtcblx0XHRtYXRjaGVzOiBmYWxzZSxcblx0XHRtZWRpYTogcXVlcnksXG5cdFx0b25jaGFuZ2U6IG51bGwsXG5cdFx0YWRkTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuXHRcdHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksIC8vIGRlcHJlY2F0ZWRcblx0XHRhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG5cdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuXHRcdGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKVxuXHR9KSlcbn0pO1xuXG4vLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlciB7XG5cdGNvbnN0cnVjdG9yKCkge31cblx0b2JzZXJ2ZSgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRkaXNjb25uZWN0KCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHVub2JzZXJ2ZSgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufTtcblxuLy8gTW9jayBSZXNpemVPYnNlcnZlclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gY2xhc3MgUmVzaXplT2JzZXJ2ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHt9XG5cdG9ic2VydmUoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0ZGlzY29ubmVjdCgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR1bm9ic2VydmUoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn07XG5cbi8vIE1vY2sgbG9jYWxTdG9yYWdlXG5jb25zdCBsb2NhbFN0b3JhZ2VNb2NrID0ge1xuXHRnZXRJdGVtOiBqZXN0LmZuKCksXG5cdHNldEl0ZW06IGplc3QuZm4oKSxcblx0cmVtb3ZlSXRlbTogamVzdC5mbigpLFxuXHRjbGVhcjogamVzdC5mbigpXG59O1xuZ2xvYmFsLmxvY2FsU3RvcmFnZSA9IGxvY2FsU3RvcmFnZU1vY2s7XG5cbi8vIE1vY2sgc2Vzc2lvblN0b3JhZ2VcbmNvbnN0IHNlc3Npb25TdG9yYWdlTW9jayA9IHtcblx0Z2V0SXRlbTogamVzdC5mbigpLFxuXHRzZXRJdGVtOiBqZXN0LmZuKCksXG5cdHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcblx0Y2xlYXI6IGplc3QuZm4oKVxufTtcbmdsb2JhbC5zZXNzaW9uU3RvcmFnZSA9IHNlc3Npb25TdG9yYWdlTW9jaztcblxuLy8gTW9jayBjb25zb2xlIG1ldGhvZHMgdG8gcmVkdWNlIG5vaXNlIGluIHRlc3RzXG5nbG9iYWwuY29uc29sZSA9IHtcblx0Li4uY29uc29sZVxuXHQvLyBVbmNvbW1lbnQgdG8gaWdub3JlIGEgc3BlY2lmaWMgbG9nIGxldmVsXG5cdC8vIGxvZzogamVzdC5mbigpLFxuXHQvLyBkZWJ1ZzogamVzdC5mbigpLFxuXHQvLyBpbmZvOiBqZXN0LmZuKCksXG5cdC8vIHdhcm46IGplc3QuZm4oKSxcblx0Ly8gZXJyb3I6IGplc3QuZm4oKSxcbn07XG5cbi8vIE1vY2sgVGV4dEVuY29kZXIgYW5kIFRleHREZWNvZGVyIGZvciBOb2RlLmpzIGVudmlyb25tZW50XG5nbG9iYWwuVGV4dEVuY29kZXIgPSBUZXh0RW5jb2Rlcjtcbmdsb2JhbC5UZXh0RGVjb2RlciA9IFRleHREZWNvZGVyO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFBO0FBRUE7QUFDQUMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE1BQU0sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLFFBQVEsRUFBRSxJQUFJO0VBQ2RDLEtBQUssRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBRUMsS0FBSyxLQUFNO0lBQy9DQyxPQUFPLEVBQUUsS0FBSztJQUNkQyxLQUFLLEVBQUVGLEtBQUs7SUFDWkcsUUFBUSxFQUFFLElBQUk7SUFDZEMsV0FBVyxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQUU7SUFDeEJPLGNBQWMsRUFBRVIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUFFO0lBQzNCUSxnQkFBZ0IsRUFBRVQsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUMzQlMsbUJBQW1CLEVBQUVWLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDOUJVLGFBQWEsRUFBRVgsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDOztBQUVGO0FBQ0FXLE1BQU0sQ0FBQ0Msb0JBQW9CLEdBQUcsTUFBTUEsb0JBQW9CLENBQUM7RUFDeERDLFdBQVdBLENBQUEsRUFBRyxDQUFDO0VBQ2ZDLE9BQU9BLENBQUEsRUFBRztJQUNULE9BQU8sSUFBSTtFQUNaO0VBQ0FDLFVBQVVBLENBQUEsRUFBRztJQUNaLE9BQU8sSUFBSTtFQUNaO0VBQ0FDLFNBQVNBLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSTtFQUNaO0FBQ0QsQ0FBQzs7QUFFRDtBQUNBTCxNQUFNLENBQUNNLGNBQWMsR0FBRyxNQUFNQSxjQUFjLENBQUM7RUFDNUNKLFdBQVdBLENBQUEsRUFBRyxDQUFDO0VBQ2ZDLE9BQU9BLENBQUEsRUFBRztJQUNULE9BQU8sSUFBSTtFQUNaO0VBQ0FDLFVBQVVBLENBQUEsRUFBRztJQUNaLE9BQU8sSUFBSTtFQUNaO0VBQ0FDLFNBQVNBLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSTtFQUNaO0FBQ0QsQ0FBQzs7QUFFRDtBQUNBLE1BQU1FLGdCQUFnQixHQUFHO0VBQ3hCQyxPQUFPLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2xCb0IsT0FBTyxFQUFFckIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQnFCLFVBQVUsRUFBRXRCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDckJzQixLQUFLLEVBQUV2QixJQUFJLENBQUNDLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBQ0RXLE1BQU0sQ0FBQ1ksWUFBWSxHQUFHTCxnQkFBZ0I7O0FBRXRDO0FBQ0EsTUFBTU0sa0JBQWtCLEdBQUc7RUFDMUJMLE9BQU8sRUFBRXBCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDbEJvQixPQUFPLEVBQUVyQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2xCcUIsVUFBVSxFQUFFdEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNyQnNCLEtBQUssRUFBRXZCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQ2hCLENBQUM7QUFDRFcsTUFBTSxDQUFDYyxjQUFjLEdBQUdELGtCQUFrQjs7QUFFMUM7QUFDQWIsTUFBTSxDQUFDZSxPQUFPLEdBQUc7RUFDaEIsR0FBR0E7RUFDSDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRCxDQUFDOztBQUVEO0FBQ0FmLE1BQU0sQ0FBQ2dCLFdBQVcsR0FBR0EsV0FBVztBQUNoQ2hCLE1BQU0sQ0FBQ2lCLFdBQVcsR0FBR0EsV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==