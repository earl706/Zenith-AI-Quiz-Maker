0178f1a2f9ef01487a75ee031cff991e
"use strict";

_getJestObj().mock('../context/AuthContext', () => ({
  ...jest.requireActual('../context/AuthContext'),
  useAuth: () => ({
    login: mockLogin,
    user: null,
    isAuthenticated: false
  })
}));
_getJestObj().mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => mockNavigate
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../context/AuthContext");
var _LoginPage = _interopRequireDefault(require("../pages/LoginPage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
} // Mock the AuthContext
const mockLogin = jest.fn();
const mockNavigate = jest.fn();
const TestWrapper = ({
  children
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: children
    })
  });
};
describe('LoginPage', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  describe('Initial Rendering', () => {
    test('should render login form', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      expect(_react2.screen.getByText('Login')).toBeInTheDocument();
      expect(_react2.screen.getByPlaceholderText('Username')).toBeInTheDocument();
      expect(_react2.screen.getByPlaceholderText('Password')).toBeInTheDocument();
      expect(_react2.screen.getByRole('button', {
        name: /login/i
      })).toBeInTheDocument();
    });
    test('should show registration link', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      expect(_react2.screen.getByText("Don't have an account?")).toBeInTheDocument();
      expect(_react2.screen.getByText('Register here')).toBeInTheDocument();
    });
    test('should show forgot password link', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      expect(_react2.screen.getByText('Forgot Password?')).toBeInTheDocument();
    });
  });
  describe('Form Input Handling', () => {
    test('should update username input', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      expect(usernameInput).toHaveValue('testuser');
    });
    test('should update password input', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: 'testpassword'
        }
      });
      expect(passwordInput).toHaveValue('testpassword');
    });
    test('should toggle password visibility', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      const toggleButton = _react2.screen.getByRole('button', {
        name: /toggle password/i
      });

      // Initially password should be hidden
      expect(passwordInput).toHaveAttribute('type', 'password');

      // Click toggle button
      _react2.fireEvent.click(toggleButton);

      // Password should be visible
      expect(passwordInput).toHaveAttribute('type', 'text');

      // Click toggle button again
      _react2.fireEvent.click(toggleButton);

      // Password should be hidden again
      expect(passwordInput).toHaveAttribute('type', 'password');
    });
  });
  describe('Form Validation', () => {
    test('should show error for empty username', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Username is required')).toBeInTheDocument();
      });
    });
    test('should show error for empty password', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Password is required')).toBeInTheDocument();
      });
    });
    test('should show error for short password', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: '123'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Password must be at least 8 characters')).toBeInTheDocument();
      });
    });
    test('should clear errors when user starts typing', async () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText('Username is required')).toBeInTheDocument();
      });
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.queryByText('Username is required')).not.toBeInTheDocument();
      });
    });
  });
  describe('Form Submission', () => {
    test('should call login function with valid credentials', async () => {
      mockLogin.mockResolvedValue({
        status: 200
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: 'testpassword123'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(mockLogin).toHaveBeenCalledWith('testuser', 'testpassword123');
      });
    });
    test('should show loading state during submission', async () => {
      mockLogin.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 100)));
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: 'testpassword123'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      expect(_react2.screen.getByText('Logging in...')).toBeInTheDocument();
      expect(loginButton).toBeDisabled();
    });
    test('should handle successful login', async () => {
      mockLogin.mockResolvedValue({
        status: 200
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: 'testpassword123'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(mockLogin).toHaveBeenCalled();
      });
    });
    test('should handle login errors', async () => {
      const errorMessage = 'Invalid credentials';
      mockLogin.mockRejectedValue(new Error(errorMessage));
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: 'testpassword123'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText(errorMessage)).toBeInTheDocument();
      });
    });
    test('should handle network errors', async () => {
      const networkError = 'Network error occurred';
      mockLogin.mockRejectedValue(new Error(networkError));
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: 'testpassword123'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByText(networkError)).toBeInTheDocument();
      });
    });
  });
  describe('Navigation', () => {
    test('should navigate to registration page', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const registerLink = _react2.screen.getByText('Register here');
      _react2.fireEvent.click(registerLink);
      expect(mockNavigate).toHaveBeenCalledWith('/register');
    });
    test('should navigate to forgot password page', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const forgotPasswordLink = _react2.screen.getByText('Forgot Password?');
      _react2.fireEvent.click(forgotPasswordLink);
      expect(mockNavigate).toHaveBeenCalledWith('/forgot-password');
    });
  });
  describe('Accessibility', () => {
    test('should have proper form labels', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      expect(_react2.screen.getByLabelText('Username')).toBeInTheDocument();
      expect(_react2.screen.getByLabelText('Password')).toBeInTheDocument();
    });
    test('should have proper button types', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      expect(loginButton).toHaveAttribute('type', 'submit');
    });
    test('should have proper input types', () => {
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      expect(usernameInput).toHaveAttribute('type', 'text');
      expect(passwordInput).toHaveAttribute('type', 'password');
    });
  });
  describe('Form Reset', () => {
    test('should clear form after successful submission', async () => {
      mockLogin.mockResolvedValue({
        status: 200
      });
      (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(TestWrapper, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_LoginPage.default, {})
      }));
      const usernameInput = _react2.screen.getByPlaceholderText('Username');
      const passwordInput = _react2.screen.getByPlaceholderText('Password');
      _react2.fireEvent.change(usernameInput, {
        target: {
          value: 'testuser'
        }
      });
      _react2.fireEvent.change(passwordInput, {
        target: {
          value: 'testpassword123'
        }
      });
      const loginButton = _react2.screen.getByRole('button', {
        name: /login/i
      });
      _react2.fireEvent.click(loginButton);
      await (0, _react2.waitFor)(() => {
        expect(mockLogin).toHaveBeenCalled();
      });

      // Form should be cleared after successful submission
      expect(usernameInput).toHaveValue('');
      expect(passwordInput).toHaveValue('');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,